// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role // ADMIN, STUDENT
  student   Student?
  admin     Admin?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id])
  transcripts Transcript[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transcript {
  id        String   @id @default(uuid())
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  semester  Semester
  year      String
  unites    Unite[]
  average   Float    @default(0)
  credits   Int      @default(0)
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Unite {
  id           String     @id @default(uuid())
  transcriptId String
  transcript   Transcript @relation(fields: [transcriptId], references: [id])
  name         String
  title        String
  coef         Float      @default(1) // Coefficient for the unit
  credit       Int        @default(0) // Credits for the unit
  moy          Float      @default(0) // Average grade for the unit
  courses      Course[] // Add relationship to Course
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Course {
  id          String   @id @default(uuid())
  uniteId     String
  unite       Unite    @relation(fields: [uniteId], references: [id])
  courseName  String
  exam        Float    @default(0)
  td          Float?
  tp          Float?
  coefficient Int      @default(1) // Coefficient (weight) of the course
  credits     Int      @default(0) // Credits for the course
  moy         Float    @default(0) // Average grade for the course
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  ADMIN
  STUDENT
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum Semester {
  S1
  S2
  S3
  S4
  S5
  S6
}
